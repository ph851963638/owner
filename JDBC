1.配置文件中添加包扫描，context命名空间
context：component-scan 
coms.spring .servic/dao
@Controller  控制层  x
@Component    x  
@Service      √   @ Service("productService")
@Repository   √

  @Repository     存储层   @Service   业务层     @Controller  展示层
@Component 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。
@Service 通常作用在业务层，但是目前该功能与 @Component 相同。
@Constroller 通常作用在控制层，但是目前该功能与 @Component 相同。

<!--为什么 @Repository 只能标注在 DAO 类上呢？这是因为该注解的作用不只是将类识别为Bean，
同时它还能将所标注的类中抛出的数据访问异常封装为 Spring 的数据访问异常类型。 
Spring本身提供了一个丰富的并且是与具体的数据访问技术无关的数据访问异常结构，
用于封装不同的持久层框架抛出的异常，使得异常独立于底层的框架。-->


java三层架构
业务逻辑层（Service层）
表现层（jsp）
采用mvc模式
M称为模型  实体类  用于数据的封装和数据的传输
V为视图，也就是GUI组件，用于数据的展示，
C为控制，也就是事件，用于流程的控制。
持久层  （DAO）
采用DAO模式，建立实体类和数据库表映射，（ORM映射）。也就是哪个类对应哪个表，哪个属性对应哪个列。持久层的目的就是，完成对象数据和关系数据的转换。
表现层(jsp)、持久层(类似dao)、业务层（逻辑层、service层）、模型（javabean）、控制层（action）


属性赋值
一、IOC体现，通过配置文件中添加<bean>
1）setSname()方法---spring  <bean>添加子标签<property>
<property name=”sname” value=”朱峰”>
<property name=”cr” ref=”cr”>
Value：表示常量
ref：表示当前属性的类型是自定义类型，另外一个Bean的id
类中必须有无参数的构造方法以及setter方法
2）有参数的构造方法---spring <bean>添加子标签<constructor-arg ></constructor-arg>   一个参数
type：参数的类型
index:第几个参数，从0开始
name：参数名
value:常量
ref:另外一个Bean的id
类中必须有有参数的构造方法，不需要setter方法
1、配置文件中添加标签，必须有无参数构造方法
<bean id=”stu” class=”com.spring.bean.Student”>
</bean>
二、IOC体现，通过注解，基于AOP机制
需要导入spring-aop.jar
配置文件中添加包扫描，使用context命名空间
<context:component-scan  base-package=”基础包”>
@Component   不属于MC层，但是通过Spring创建对象
等价于<bean id=”” class=””>
默认id是类名首字母小写，其他不变  userDAO
属性赋值使用注解：@Value    @Autowired  
@Value 修饰的属性的类型是API的类，8种基本类型
List/Set<API类型>   API类型数组[]
注意：也可以修饰自定义类型的属性，必须使SpEL表达式给属性赋值，#{ }
@Value(“#{ ‘tom’ }”)
@Value(“#{ 100 }”)
@Value(“#{引用的另外一个bean的id}”)
@Autowired（required=true） 修饰的属性类型是自定义的类
修饰的属性对应的自定义类，此时该类必须通过spring创建（添加注解创建对象/<bean>）
@Controller  修饰控制层---SpringMVC
@Service    修饰的业务层--XXXService
@Repository   修饰XXXDAO
MC
Student.java
package  com.spring.bean
@Component
public class Student{  
private String sname;
@Value(“#{引用的另外一个bean的id}”)
private ClassRoom cr;//=new ClassRoom()
private  List<Integer> score;
@Autowired  多个Book类型的对象 接口、父类
private  Set<Book> book;
Public  Student(String name){
this.sname=name;
}
 无参数构造方法  }
@Component
public class  Book{}
Book b = new  Book()
@Component
Public  class   JavaBook  extends   Book{}
Book   b = new  JavaBook();   多态
三、配置文件中给List<Integer>属性赋值，创建集合对象
<bean id=”保持跟通过注解创建Student对象时的id一致”>
<property  name=”score”ref=”scores”>
通用的集合，使用命名空间util
<util:list  id=”scores”>
<value>98</value>
<value>98</value>
<value>98</value>
</util:list>

  
  controller   修饰控制层
  serveice    修饰业务层
  repository   修饰dao
















List <Study> lss=new ArrayList<Study>();
Set 只能存储字符串   Set<String>
             整数   Set<Integer>  封装类   八种基本类型引用
配置文件给List<Integer>属性赋值，创建集合对象使用  util
SpringMVC框架
属于spring 框架的一部分，Servlet -DispatcherServlet:前端控制器


1.使用步骤；
1.导入jar包 5+2spring-web&web-mvc+1 spring-aop
2配置前端控制器  web-inf/xml
3.添加springmvc配置文件，xxx-servlet.xml，默认web-inf下面；
4.spring 配置文件中添加包扫描，只能扫描Controller
5.controller 创建xxxxController,给类添加注解
@Controller  springmvc类中的一个方法对应一个请求；
Servlet中doget/dopost ，一个servlet只能处理一个请求，

 






