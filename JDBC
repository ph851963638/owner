1.配置文件中添加包扫描，context命名空间
context：component-scan 
coms.spring .servic/dao
@Controller  控制层  x
@Component    x  
@Service      √   @ Service("productService")
@Repository   √

  @Repository     存储层   @Service   业务层     @Controller  展示层
@Component 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。
@Service 通常作用在业务层，但是目前该功能与 @Component 相同。
@Constroller 通常作用在控制层，但是目前该功能与 @Component 相同。

<!--为什么 @Repository 只能标注在 DAO 类上呢？这是因为该注解的作用不只是将类识别为Bean，
同时它还能将所标注的类中抛出的数据访问异常封装为 Spring 的数据访问异常类型。 
Spring本身提供了一个丰富的并且是与具体的数据访问技术无关的数据访问异常结构，
用于封装不同的持久层框架抛出的异常，使得异常独立于底层的框架。-->


java三层架构
业务逻辑层（Service层）
表现层（jsp）
采用mvc模式
M称为模型  实体类  用于数据的枫树和数据的传输
V为视图，也就是GUI组件，用于数据的展示，
C为控制，也就是事件，用于流程的控制。
持久层  （DAO）
采用DAO模式，建立实体类和数据库表映射，（ORM映射）。也就是哪个类对应哪个表，哪个属性对应哪个列。持久层的目的就是，完成对象数据和关系数据的转换。
表现层(jsp)、持久层(类似dao)、业务层（逻辑层、service层）、模型（javabean）、控制层（action）

List <Study> lss=new ArrayList<Study>();
Set 只能存储字符串   Set<String>
             整数   Set<Integer>  封装类   八种基本类型引用






